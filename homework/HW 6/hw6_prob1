{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "                                                            Joseph High\n",
    "                                                            UNI: jph2185\n",
    "# HW # 6 - Problem 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part (a)  - Compute the VaR at the $\\alpha$-significance level"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math as math\n",
    "import cvxpy as cvx\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import linprog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# US_3-MONTH_T-BILLS US_GOVN_LONG_BONDS SP_500 WILSHIRE_5000 :=\n",
    "X = np.matrix([\n",
    "    [1984, 1.103, 1.159, 1.061, 1.030],\n",
    "    [1985, 1.080, 1.366, 1.316, 1.326],\n",
    "    [1986, 1.063, 1.309, 1.186, 1.161],\n",
    "    [1987, 1.061, 0.925, 1.052, 1.023],\n",
    "    [1988, 1.071, 1.086, 1.165, 1.179],\n",
    "    [1989, 1.087, 1.212, 1.316, 1.292],\n",
    "    [1990, 1.080, 1.054, 0.968, 0.938],\n",
    "    [1991, 1.057, 1.193, 1.304, 1.342],\n",
    "    [1992, 1.036, 1.079, 1.076, 1.090],\n",
    "    [1993, 1.031, 1.217, 1.100, 1.113],\n",
    "    [1994, 1.045, 0.889, 1.012, 0.999]]);\n",
    "\n",
    "n, d = np.shape(X)\n",
    "\n",
    "L = 1 - X[:,1:n];\n",
    "mu_est = -np.mean(L,0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_rates = 0.25*(L[:,0] + L[:,1] + L[:,2] + L[:,3]);   #Loss rate vector for the equally weighted portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dist_loss = np.sort(loss_rates, axis = 0);   # permute the loss vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[-0.272  ],\n",
       "        [-0.22675],\n",
       "        [-0.224  ],\n",
       "        [-0.17975],\n",
       "        [-0.12525],\n",
       "        [-0.11525],\n",
       "        [-0.08825],\n",
       "        [-0.07025],\n",
       "        [-0.01525],\n",
       "        [-0.01   ],\n",
       "        [ 0.01375]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_loss    # sorted loss rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 11;                       # number of samples\n",
    "alpha = 1 - (2/N);            # compute the alpha-significance level\n",
    "I = math.ceil(alpha*N);       # index position of the quantile corresponding to the VaR\n",
    "VaR = -dist_loss.item(I-1);   # VaR at the alpha confidence level (multiplying by -1 since VaR is non-negative)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.015249999999999986"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "VaR     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VaR(alpha, L) =  0.015250 \n",
      "\n",
      "VaR in this case should be unitless. Indeed, the units cancel out computing the returns.\n"
     ]
    }
   ],
   "source": [
    "print(\"VaR(alpha, L) =\", ' %.6f ' % VaR)\n",
    "\n",
    "print(\"\\nVaR in this case should be unitless. Indeed, the units cancel out computing the returns.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part (b) - Compute the Conditional VaR using two approaches \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1st approach - Permute the scenario loss vector\n",
    "# Note: the loss vector was already permuted in part (a)\n",
    "\n",
    "CVaR = np.mean(dist_loss[I:len(dist_loss)]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVaR =  0.001875    when computed by permuting the loss vector\n"
     ]
    }
   ],
   "source": [
    "print(\"CVaR =\", ' %.6f ' % CVaR, \"  when computed by permuting the loss vector\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2nd approach - Solve the LP\n",
    "\n",
    "loss = np.asarray(loss_rates.T)\n",
    "\n",
    "Aeq = np.asarray([[1,1,1,1,1,1,1,1,1,1,1],        \n",
    "                [0,0,0,0,0,0,0,0,0,0,0]])       # linprog requires A_eq be a 2D array, so a row of zeros is used\n",
    "beq = np.asarray([1, 0])                           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "lp_res = linprog(-loss, A_ub = None, b_ub = None, A_eq = Aeq, b_eq = beq,  #multiply obj fnc by -1 since maximizing\n",
    "             bounds = (0, 1/((1-alpha)*N)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     con: array([-1.66799219e-09,  0.00000000e+00])\n",
       "     fun: -0.0018749994855429167\n",
       " message: 'Optimization terminated successfully.'\n",
       "     nit: 6\n",
       "   slack: array([], dtype=float64)\n",
       "  status: 0\n",
       " success: True\n",
       "       x: array([7.15933578e-10, 2.29203481e-10, 3.71992391e-10, 1.78117057e-10,\n",
       "       5.32809113e-10, 2.86783257e-10, 4.99999998e-01, 2.90913350e-10,\n",
       "       8.46333929e-10, 5.74251503e-10, 4.99999999e-01])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lp_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVaR =  0.001875      -- same result as first approach\n"
     ]
    }
   ],
   "source": [
    "print(\"CVaR =\", ' %.6f ' % -lp_res.fun, \"    -- same result as first approach\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part (c)   -   Solve for the mean-CVaR optimal portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The optimal objective value and optimal solution for each value of gamma: \n",
      "\n",
      "gamma    Exp.Return*      x1*        x2*     x3*        x4*\n",
      "0.02       0.23669     -1.02128     -0.0     5.0     -2.97872    \n",
      "0.04       0.25176     -1.23404     -0.0     5.0     -2.76596    \n",
      "0.06       0.26682     -1.44681     -0.0     5.0     -2.55319    \n",
      "0.08       0.28189     -1.65957     -0.0     5.0     -2.34043    \n"
     ]
    }
   ],
   "source": [
    "beta = cvx.Variable(1) \n",
    "x = cvx.Variable(4)\n",
    "z = cvx.Variable(11)\n",
    "\n",
    "x_pos = cvx.Variable(4)\n",
    "x_neg = cvx.Variable(4)\n",
    "x = x_pos - x_neg\n",
    "\n",
    "obj = mu_est*x\n",
    "objective = cvx.Maximize(obj);\n",
    "\n",
    "M = 1.25\n",
    "max_return = np.zeros(4)\n",
    "res = np.zeros((4,6))\n",
    "gamma = np.array([0.02, 0.04, 0.06, 0.08])\n",
    "\n",
    "for i in range(4):\n",
    "    constraints = [];\n",
    "    constraints += [(beta + (1/((1-alpha)*N))*sum(z)) <= gamma[i]]\n",
    "    constraints += [z - L*x + beta >= 0]\n",
    "    constraints += [z >= 0]\n",
    "    constraints += [sum(x) == 1]\n",
    "    constraints += [M*sum(x_neg) - sum(x_pos) <= 0]\n",
    "    constraints += [x_pos >= 0]\n",
    "    constraints += [x_neg >= 0]\n",
    "    \n",
    "    prob = cvx.Problem(objective, constraints)\n",
    "    prob.solve(solver = cvx.CVXOPT)\n",
    "    \n",
    "    max_return[i] = prob.value;\n",
    "    res[i, :] = [gamma[i], max_return[i], x[0].value, x[1].value, x[2].value, x[3].value]\n",
    "\n",
    "res = np.round(res, 5)\n",
    "print('The optimal objective value and optimal solution for each value of gamma: \\n')\n",
    "print('gamma    Exp.Return*      x1*        x2*     x3*        x4*')\n",
    "\n",
    "np.set_printoptions(formatter={'float': '{: 0.4f}'.format})\n",
    "for i in range(4):\n",
    "    print(res[i,:].item(0), '     ', res[i,:].item(1), '   ', res[i,:].item(2), '   ', res[i,:].item(3), '   ', \n",
    "         res[i,:].item(4), '   ', res[i,:].item(5), '   ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the mean-CVaR frontier\n",
    "\n",
    "plt.title('Mean - CVaR Frontier')\n",
    "plt.xlabel('CVaR')\n",
    "plt.ylabel('Expected Return')\n",
    "plt.plot(gamma, max_return)\n",
    "plt.autoscale(enable=True, tight=True)\n",
    "plt.axis([0.02,0.08,0.22,0.29])\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
